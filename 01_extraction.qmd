---
title: "01_extraction"
author: "matheus_moroti"
format: html
editor: visual
---

### 0.0. Libraries

```{r}
library(ape) # phylogeny package
library(phytools) # phylogeny package
library(picante) # phylogeny package
library(geiger) # phylogeny package
library(visdat) # missing data check
library(tidyverse) # data science handling
library(BAMMtools) # BAMM package
```

### 0.1. Load data

#### 0.1. Trait data
```{r}
group <- "Amphibia"
#group <- "Reptilia"
#group <- "Aves"
#group <- "Mammalia"
```

Phenotipic trait
```{r}
TetraData <- data.table::fread("traits/TetrapodTraits_1.0.0.csv")

group_trait <- TetraData %>%
  filter(Class == group) %>%
  filter(ImputedLength == 0) %>%
  select(Scientific.Name, BodyLength_mm) %>%
  
  mutate(BodyLength_mm = log(BodyLength_mm))

group_community <- group_trait %>%
  pivot_wider(names_from = Scientific.Name, values_from = type)
```

Climatic niche
```{r}
amphibia_niche <- data.table::fread(
  file.path("02_metrics", "omi_data", paste0("niche_", group, "_terrestrial.txt") )
) %>% rename(Scientific.Name = V1) 

group_trait <- amphibia_niche %>%
  select(Scientific.Name, Tol) %>%
  mutate(Scientific.Name = gsub(" ", "_", Scientific.Name)) %>%
  mutate(Tol = log(Tol+1)) 

group_community <- group_trait %>%
  pivot_wider(names_from = Scientific.Name, values_from = Tol)
```

#### 0.2. Phylogenetic data
```{r}
tree <- "amph_shl_new_Posterior_7238.1000.trees"
#tree <- "squam_shl_new_Posterior_9755.1000.trees"
#tree <- "mammals_birth_death_node-dated-completed-trees.nex"
#tree <- "birds_hackett_allspecies.nex"
```

```{r}
if (file.exists(file.path("BAMM", group, "/", tree))) {
  trees <- tryCatch(
    read.tree(file.path("BAMM", group, "/", tree)),
    error = function(e) {
      message("Erro ao usar read.tree. Tentando com read.nexus...")
      read.nexus(file.path("BAMM", group, "/", tree))
    }
  )
} else {
  stop("O arquivo especificado nÃ£o existe.")
}

# Test if trees are dichotomic (must return TRUE, if FALSE see the next step)
# JUST RUN IT, DON'T CHANGE ANYTHING
all(is.binary(trees))

# If trees are polytomic you can dichotomize them using one of the
# followings commands, I recommend the fix.poly because it
# assigns branch lengths (randomly based on node heights)

# If you got TRUE in the previous step, you can omit this

# Using fix.poly (assign branch lengths)
#for(i in 1:length(trees)){
#  trees[[i]] <- fix.poly(trees[[i]], type = "resolve")
#}

# Using multi2di (don't assign branch lengths)
# trees <- multi2di(trees)
```

### 1.0. Create files to BAMM analysis
1.1. Obtain samples of phylogeny
```{r}
# Generate a data frame to store the prior values
# JUST RUN IT, DON'T CHANGE ANYTHING
set.seed(123)
sampled_trees <- sample(trees, 10)
```

If you already have the phylogeny-sample, run it here!
```{r}
trees <- lapply(file.path(
  "BAMM", group,
  paste0("Amphibia_Tree_", 1:10, ".tre")),
  read.tree)

sampled_trees <- do.call(c, trees)
```

1.2. Obtain the same species in phylogeny and traits
```{r}
especies_comuns <- intersect(
  sampled_trees[[1]]$tip.label,  # spp na arvore
  group_trait$Scientific.Name    # spp com traits
)

group_trait_filter <- group_trait %>%
  filter(Scientific.Name %in% especies_comuns)

breadth_niche <- as.numeric(group_trait_filter$Tol) # change trait if needed
names(breadth_niche) <- group_trait_filter$Scientific.Name
```

1.3. Save trait file
```{r}
write.table(breadth_niche, 
            file = file.path("BAMM", group, "/", paste0(group,"_niche_breadth.txt")),
            quote = FALSE, 
            #sep = "\t",  
            col.names = FALSE,
            row.names = TRUE)
```

### 2.0. Priors of trait evolution
```{r}
priors_list <- list()

priors_list <- lapply(seq_along(sampled_trees), function(i) {
  
  sampled_trees[[i]] <- picante::prune.sample(group_community,
                                              sampled_trees[[i]])
  write.tree(sampled_trees[[i]], file = file.path("BAMM", group, paste0(group, "_Tree_", i, ".tre")))
  
  bamm_priors <- setBAMMpriors(
    phy = sampled_trees[[i]],
    traits = breadth_niche,
    outfile = NULL
  )
  
  priors_list[[i]] <- data.frame(
    betaInitPrior = as.numeric(bamm_priors["betaInitPrior"]),    
    betaShiftPrior = as.numeric(bamm_priors["betaShiftPrior"]),  
    stringsAsFactors = FALSE
  ) 
}) 

priors <- do.call(rbind, priors_list) 
```

### 3.0 Generate control file to BAMM analysis
```{r}
generateControlFile(file = file.path("BAMM", group, "/", paste0("controlfile_", group, ".txt")),
                    type = 'trait', params = list(
                      treefile = 'tree.new',
                      traitfile= paste0(group, "_niche_breadth.txt"),
                      numberOfGenerations = '350000000',
                      overwrite = '1',
                      #betaShiftPrior = as.numeric(priors['betaShiftPrior']),
                      #betaInitPrior = 0.1,
                      useObservedMinMaxAsTraitPriors = '1',
                      expectedNumberOfShifts = 50, # > 5000 tips
                      mcmcOutfile = "mcmc_out.txt",
                      eventDataOutfile = "event_data.txt",
                      eventDataWriteFreq = '100000',
                      betaIsTimeVariablePrior = 0,
                      deltaT = 0.01,
                      numberOfChains = 4))

# Read the divcontrol file (supplied template is for BAMM v.2.5.0, please do not modify it)
divcontrol <- readLines(file.path("BAMM", group, "/", paste0("controlfile_", group, ".txt")), warn = FALSE)
```

### 4.0. Run BAMM analysis
4.1. Set your output directory and change local directory
```{r}
# Local directory output
BAMMpath <- "D:/repos/vertebrates_evolution/BAMM"
# Access the folder of group
setwd(file.path("BAMM", group))
```

4.2. Trait evolution rate
```{r}
for(i in 1:length(sampled_trees)){
  
  # Create a temporal copy of the divcontrol file
  tmp.divcontrol <- divcontrol
  
  # Replace the default path to read the tree files
  tmp.divcontrol[20] <- paste("treefile = ", BAMMpath, "/", group, "/", group, "_Tree_", i, ".tre", sep = "")
  
  # Replace the default path to save the output run_info files
  if(file.exists(paste(BAMMpath, "/", group, "/run_info", sep = "")) == FALSE){
    dir.create(paste(BAMMpath, "/", group, "/run_info", sep = ""))
    tmp.divcontrol[26] <- paste("runInfoFilename = ", BAMMpath, "/", group, "/run_info/", "run_info.txt", sep = "")
  }else{
    tmp.divcontrol[26] <- paste("runInfoFilename = ", BAMMpath, "/", group, "/run_info/", "run_info.txt", sep = "")
  }
  
  # Replace the default priors with custom priors generated in the previous step
  #tmp.divcontrol[59] <- paste("expectedNumberOfShifts = ", priors[i, 1], sep = "")
  tmp.divcontrol[65] <- paste("betaInitPrior = ", priors[i, 1], sep = "")
  tmp.divcontrol[69] <- paste("betaShiftPrior = ", priors[i, 2], sep = "")
  #tmp.divcontrol[26] <- paste("muInitPrior = ", priors[i, 4], sep = "")
  
  # Replace the default path to save the output mcmc_out, event_data, chain_swap files
  if(file.exists(paste(BAMMpath, "/", group, "/mcmc_output", sep = "")) == FALSE){
    dir.create(paste(BAMMpath, "/", group, "/mcmc_output", sep = ""))
    tmp.divcontrol[98] <- paste("mcmcOutfile = ", BAMMpath, "/", group, "/mcmc_output/", "mcmc_out.txt", sep = "")
  }else{
    tmp.divcontrol[98] <- paste("mcmcOutfile = ", BAMMpath, "/", group, "/mcmc_output/", "mcmc_out.txt", sep = "")
  }
  
  # Replace the default path to save the output event_data files
  if(file.exists(paste(BAMMpath, "/", group, "/event_data", sep = "")) == FALSE){
    dir.create(paste(BAMMpath, "/", group, "/event_data", sep = ""))
    tmp.divcontrol[105] <- paste("eventDataOutfile = ", BAMMpath, "/", group, "/event_data/", "event_data.txt", sep = "")
  }else{
    tmp.divcontrol[105] <- paste("eventDataOutfile = ", BAMMpath, "/", group, "/event_data/", "event_data.txt", sep = "")
  }
  
  # Set a custom prefix for the output files based on the group names
  tmp.divcontrol[121] <- paste("outName = ", group, "_Tree_", i,  sep = "")
  
  # Replace the default path to save the output chain_swap files
  if(file.exists(paste(BAMMpath, "/", group, "/chain_swap", sep = "")) == FALSE){
    dir.create(paste(BAMMpath, "/", group, "/chain_swap", sep = ""))
    tmp.divcontrol[217] <- paste("chainSwapFileName = ", BAMMpath, "/", group, "/chain_swap/", "chain_swap.txt", sep = "")
  }else{
    tmp.divcontrol[217] <- paste("chainSwapFileName = ", BAMMpath, "/", group, "/chain_swap/", "chain_swap.txt", sep = "")
  }
  
  # Save the custom divcontrol file for the current tree
  writeLines(tmp.divcontrol, con = paste(BAMMpath, "/", group, "/divcontrol_CUSTOM.txt", sep = ""))
  
  # Generate the command for running the BAMM analysis
  cmd <- paste(paste(BAMMpath, "/bamm", sep = ""), "-c", paste(BAMMpath, "/", group, "/divcontrol_CUSTOM.txt", sep = ""), sep = " ")
  
  # Run the BAMM
  system(cmd)
  
}
```

### 5.0 Check convergence
```{r}
for(i in 1:10){
  mcmcout <- read.table(
      paste0("mcmc_output/", group, "_Tree_", i, "_mcmc_out.txt", sep = ""),
                        sep=',', header=T) 
  #tail(mcmcout)
  #plot(mcmcout$logLik ~ mcmcout$generation)
  burnstart <- floor(0.1 * nrow(mcmcout))
  postburn <- mcmcout[burnstart:nrow(mcmcout),]
  print(coda::effectiveSize(postburn$N_shifts))
  print(coda::effectiveSize(postburn$logLik))
}
```

### 6.0 Reading multiple event data

6.1. Set how many readings and trait type

```{r}
trait <- "body"
n_arvores <- 10
lista_dfs <- list()
```

6.2. Run event data read

```{r}
for (i in 1:n_arvores) {
  # load tree
  arvore <- read.tree(paste0(group, "_Tree_", i, ".tre"))
  
  # load event data
  edata <- getEventData(
    arvore,
    type = "trait",
    eventdata = paste0("event_data/", group , "_Tree_", i, "_event_data.txt"),
    burnin = 0.2
  )
  
  # extract median
  median_rates <- getTipRates(edata, statistic = 'median')$betabeta.avg
  
  # dataframe with median rates
  lista_dfs[[i]] <- data.frame(
    specie = names(median_rates),
    median_rate = median_rates,
    stringsAsFactors = FALSE
  )
  names(lista_dfs[[i]])[2] <- paste0("median_tree_", i)
  save(lista_dfs, file = paste0(trait, "rate_evolution.RData"))
}
```

6.3. Obtain event data result

```{r}
load(paste0(trait, "rate_evolution.RData")) 

rate_final <- Reduce(
  function(x, y) left_join(x, y, by = "specie"),
  lista_dfs
) %>%
  mutate(
    median_rate = apply(select(., starts_with("median_tree_")),
                        1, median, na.rm = TRUE)
  )
```
